:root {
  --theme-background: white;
  --theme-text: black;
  --theme-link: blue;
  --theme-highlight-background: #f06;
  --theme-highlight-text: white;
}

::highlight(custom-highlight) {
  /* Custom highlights are using the new highlight inheritance model, where highlight styles are
     inherited through a separate cascade: https://drafts.csswg.org/css-pseudo-4/#highlight-cascade.
     While for the most part this provides a better author experience than the existing ::selection
     behavior, it means that CSS variables set on :root currently don't apply to the highlight cascade.
     This is a known issue that CSSWG is trying to decide how best to fix:
     https://github.com/w3c/csswg-drafts/issues/6641.
     So for now we need to re-define our variables in the ::highlight() ruleset.
     We do this in setTheme in reader.js and that code depends on this CSS rule being in second
     place in this file. So don't move it. */
  --theme-highlight-background: #f06;
  --theme-highlight-text: white;
}

::selection {
  background-color: var(--theme-highlight-background);
  color: var(--theme-highlight-text);
}

body {
  font-family: Helvetica, Arial, sans-serif;
  font-size: 20px;
  line-height: 1.6;
  margin: 0;
  padding: 1rem 200px;
  background-color: var(--theme-background);
}

theme-selector {
  position: fixed;
  top: 1rem;
  right: 1rem;
}

.home-page .reader {
  text-align: center;
}

body:not(.home-page) .existing-articles {
  display: none;
}

.existing-articles {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.existing-articles > li {
  width: 15rem;
  flex-grow: 0.5;
}

.existing-articles, .existing-articles li {
  list-style: none;
  margin: 0;
  padding: 0;
}

.existing-articles text-snippet::part(text) {
  -webkit-line-clamp: 3;
  font-size: 1.5rem;
}

.reader {
  max-width: 35rem;
  margin: 0 auto;
  color: var(--theme-text);
}

.reader a,
.reader a:visited {
  color: var(--theme-link);
}

.reader img {
  max-width: 100%;
  height: auto;
  margin-inline: auto;
  display: block;
}

.highlight-btn {
  position: absolute;
  display: none;
  border: none;
  background: var(--theme-highlight-background);
  color: var(--theme-highlight-text);
  border-radius: 0.25rem;
  padding: 0.25rem;
  font-weight: bold;
  cursor: pointer;
  box-shadow: 0 0 0.25rem 0 #0003;
}

.toolbar {
  position: fixed;
  top: 0;
  left: 0;
  width: 200px;
  height: 100%;
  overflow-y: auto;
  font-size: 1rem;
  padding: 3rem 1rem;
  box-sizing: border-box;
}

.toolbar .highlighted ul {
  margin: 0;
  padding: 0;
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

::highlight(custom-highlight) {
  background-color: var(--theme-highlight-background);
  color: var(--theme-highlight-text);
}

#progressbar {
  position: fixed;
  top: 0;
  left: 0;
  height: 0.5rem;
  background: var(--theme-highlight-background);
}

.home-page #progressbar {
  display: none;
}

@supports (animation-timeline: scrollTimeline) {
  #progressbar {
    animation: 1s linear forwards adjust-progressbar;
    animation-timeline: scrollTimeline;
  }

  @scroll-timeline scrollTimeline {
    source: auto;
    orientation: vertical;
    scroll-offsets: 0%, 100%;
  }

  @keyframes adjust-progressbar {
    from {
      width: 0;
    }
    to {
      width: 100%;
    }
  }
}

@media screen and (max-width: 700px) {
  /* On smaller screens, don't provide such a big side padding to accomodate the sidebar. */
  body {
    padding: 2rem;
  }

  /* Move the sidebar to the bottom of the screen instead, and make it smaller. */
  .toolbar {
    top: unset;
    bottom: 0;
    width: 100%;
    max-height: 20vh;
    height: unset;
    background: var(--theme-background);
    padding: 1rem;
  }

  /* Display the highlights in a grid instead. */
  .toolbar .highlighted ul {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  }

  /* And make them smaller. */
  text-snippet::part(text) {
    -webkit-line-clamp: 3;
  }
}
